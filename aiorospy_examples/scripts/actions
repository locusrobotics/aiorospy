#!/usr/bin/env python3.7
import asyncio
import random

import aiorospy
import rospy
from actionlib.msg import TestAction, TestGoal, TestResult


async def handle_action(goal_handle):
    try:
        goal_handle.set_accepted()
        delay = goal_handle.get_goal().goal / 1000
        await asyncio.sleep(delay)
        goal_handle.set_succeeded(text=f"Slept for {delay}s")

    except asyncio.CancelledError:
        goal_handle.set_canceled(text=f"Woken up trying to sleep for {delay}s")
        raise


async def goal_loop(client):
    while True:
        goal_handle = await client.ensure_goal(TestGoal(goal=random.randint(1, 1000)), resend_timeout=1.0)
        try:
            await asyncio.wait_for(goal_handle.wait(), timeout=0.5)
        except asyncio.TimeoutError:
            print("Cancelling goal after 0.5s...")
            goal_handle.cancel()
            await goal_handle.wait()

        print(goal_handle.text)
        print("---")


if __name__ == '__main__':
    rospy.init_node('actions')

    loop = asyncio.get_event_loop()
    loop.set_debug(True)

    server = aiorospy.AsyncActionServer('async_action', TestAction, handle_action)
    client = aiorospy.AsyncActionClient('async_action', TestAction)

    tasks = asyncio.gather(
        server.start(),
        client.start(),
        goal_loop(client)
    )

    aiorospy.cancel_on_exception(tasks)
    aiorospy.cancel_on_shutdown(tasks)

    try:
        loop.run_until_complete(tasks)
    except asyncio.CancelledError:
        pass
