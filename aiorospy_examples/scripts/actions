#!/usr/bin/env python3
import asyncio
import random

import aiorospy
import rospy
from actionlib.msg import TestAction, TestGoal, TestResult


class ActionDemo:

    def __init__(self):
        self.server = aiorospy.AsyncActionServer('async_action', TestAction, self.handle_action)
        self.client = aiorospy.AsyncActionClient('async_action', TestAction)

    async def handle_action(self, goal_handle):
        goal_id = goal_handle.get_goal_id().id.split('-')[1]
        try:
            delay = goal_handle.get_goal().goal / 1000
            print(f"Server: Doing task {goal_id} for {delay}s")
            goal_handle.set_accepted()
            await asyncio.sleep(delay)
            goal_handle.set_succeeded()
            print(f"Server: Done task {goal_id}!")

        except asyncio.CancelledError:
            print(f"Server: Interrupted during task {goal_id}")
            goal_handle.set_canceled()
            raise

    async def goal_loop(self):
        while True:
            number = random.randint(1, 1000)
            print(f"Client: Asking server to work for {number/1000}s")
            goal_handle = await self.client.ensure_goal(TestGoal(goal=number), resend_timeout=1.0)
            try:
                await asyncio.wait_for(goal_handle.wait(), timeout=0.5)
            except asyncio.TimeoutError:
                print("Client: Cancelling after 0.5s...")
                goal_handle.cancel()
                await goal_handle.wait()
            print("---")


if __name__ == '__main__':
    rospy.init_node('actions')

    loop = asyncio.get_event_loop()
    loop.set_debug(True)

    demo = ActionDemo()

    tasks = asyncio.gather(
        demo.server.start(),
        demo.client.start(),
        demo.goal_loop()
    )

    aiorospy.cancel_on_exception(tasks)
    aiorospy.cancel_on_shutdown(tasks)

    try:
        loop.run_until_complete(tasks)
    except asyncio.CancelledError:
        pass
